-- do not edit; automatically generated by UU.AG
module AST where
-- DataDeclaration ---------------------------------------------
{-
   inherited attributes:
      listadatas           : [String]

   chained attributes:

   synthesised attributes:
      datas                : [String]
      verificar            : Bool

-}
{-
   local variables for DataDeclaration.ConsDataDeclaration:

-}
data DataDeclaration = DataDeclaration_ConsDataDeclaration (String) (String) (StringList)
                     deriving ( Show)
-- semantic domain
type T_DataDeclaration = ([String]) ->
                         ( ([String]),(Bool))
-- cata
sem_DataDeclaration :: (DataDeclaration) ->
                       (T_DataDeclaration)
sem_DataDeclaration ((DataDeclaration_ConsDataDeclaration (_a) (_b) (_stringList))) =
    (sem_DataDeclaration_ConsDataDeclaration (_a) (_b) ((sem_StringList (_stringList))))
sem_DataDeclaration_ConsDataDeclaration :: (String) ->
                                           (String) ->
                                           (T_StringList) ->
                                           (T_DataDeclaration)
sem_DataDeclaration_ConsDataDeclaration (a_) (b_) (stringList_) =
    \ _lhsIlistadatas ->
        let _lhsOdatas :: ([String])
            _lhsOverificar :: (Bool)
            -- "AST.ag"(line 108, column 23)
            (_lhsOdatas@_) =
                [a_]
            -- "AST.ag"(line 111, column 23)
            (_lhsOverificar@_) =
                True
        in  ( _lhsOdatas,_lhsOverificar)
-- Expresion ---------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for Expresion.ExpCase:

-}
{-
   local variables for Expresion.ExpComp:

-}
{-
   local variables for Expresion.ExpFunction:

-}
{-
   local variables for Expresion.ExpLambda:

-}
{-
   local variables for Expresion.ExpLet:

-}
{-
   local variables for Expresion.ExpLit:

-}
data Expresion = Expresion_ExpCase (String) (LitExp) (LitExpList)
               | Expresion_ExpComp (Literal) (Operator) (Expresion)
               | Expresion_ExpFunction (String) (ParamList)
               | Expresion_ExpLambda (String) (StringList) (Expresion)
               | Expresion_ExpLet (FunctionDeclaration) (FunctionDeclarationList) (Expresion)
               | Expresion_ExpLit (Literal)
               deriving ( Show)
-- semantic domain
type T_Expresion = ( )
-- cata
sem_Expresion :: (Expresion) ->
                 (T_Expresion)
sem_Expresion ((Expresion_ExpCase (_string) (_litExp) (_litExpList))) =
    (sem_Expresion_ExpCase (_string) ((sem_LitExp (_litExp))) ((sem_LitExpList (_litExpList))))
sem_Expresion ((Expresion_ExpComp (_literal) (_operator) (_expresion))) =
    (sem_Expresion_ExpComp ((sem_Literal (_literal))) ((sem_Operator (_operator))) ((sem_Expresion (_expresion))))
sem_Expresion ((Expresion_ExpFunction (_string) (_paramList))) =
    (sem_Expresion_ExpFunction (_string) ((sem_ParamList (_paramList))))
sem_Expresion ((Expresion_ExpLambda (_string) (_stringList) (_expresion))) =
    (sem_Expresion_ExpLambda (_string) ((sem_StringList (_stringList))) ((sem_Expresion (_expresion))))
sem_Expresion ((Expresion_ExpLet (_functionDeclaration) (_functionDeclarationList) (_expresion))) =
    (sem_Expresion_ExpLet ((sem_FunctionDeclaration (_functionDeclaration))) ((sem_FunctionDeclarationList (_functionDeclarationList))) ((sem_Expresion (_expresion))))
sem_Expresion ((Expresion_ExpLit (_literal))) =
    (sem_Expresion_ExpLit ((sem_Literal (_literal))))
sem_Expresion_ExpCase :: (String) ->
                         (T_LitExp) ->
                         (T_LitExpList) ->
                         (T_Expresion)
sem_Expresion_ExpCase (string_) (litExp_) (litExpList_) =
    let 
    in  ( )
sem_Expresion_ExpComp :: (T_Literal) ->
                         (T_Operator) ->
                         (T_Expresion) ->
                         (T_Expresion)
sem_Expresion_ExpComp (literal_) (operator_) (expresion_) =
    let 
    in  ( )
sem_Expresion_ExpFunction :: (String) ->
                             (T_ParamList) ->
                             (T_Expresion)
sem_Expresion_ExpFunction (string_) (paramList_) =
    let 
    in  ( )
sem_Expresion_ExpLambda :: (String) ->
                           (T_StringList) ->
                           (T_Expresion) ->
                           (T_Expresion)
sem_Expresion_ExpLambda (string_) (stringList_) (expresion_) =
    let 
    in  ( )
sem_Expresion_ExpLet :: (T_FunctionDeclaration) ->
                        (T_FunctionDeclarationList) ->
                        (T_Expresion) ->
                        (T_Expresion)
sem_Expresion_ExpLet (functionDeclaration_) (functionDeclarationList_) (expresion_) =
    let 
    in  ( )
sem_Expresion_ExpLit :: (T_Literal) ->
                        (T_Expresion)
sem_Expresion_ExpLit (literal_) =
    let 
    in  ( )
-- FuncTyDecl --------------------------------------------------
{-
   inherited attributes:
      listadatas           : [String]

   chained attributes:

   synthesised attributes:
      datas                : [String]
      verificar            : Bool

-}
{-
   local variables for FuncTyDecl.Tuple:

-}
type FuncTyDecl = ( (TypeFunction),(FunctionDeclaration))
-- semantic domain
type T_FuncTyDecl = ([String]) ->
                    ( ([String]),(Bool))
-- cata
sem_FuncTyDecl :: (FuncTyDecl) ->
                  (T_FuncTyDecl)
sem_FuncTyDecl (( tyfun,fundecl)) =
    (sem_FuncTyDecl_Tuple ((sem_TypeFunction (tyfun))) ((sem_FunctionDeclaration (fundecl))))
sem_FuncTyDecl_Tuple :: (T_TypeFunction) ->
                        (T_FunctionDeclaration) ->
                        (T_FuncTyDecl)
sem_FuncTyDecl_Tuple (tyfun_) (fundecl_) =
    \ _lhsIlistadatas ->
        let _lhsOdatas :: ([String])
            _lhsOverificar :: (Bool)
            _tyfunIdatas :: ([String])
            _tyfunIverificar :: (Bool)
            _tyfunOlistadatas :: ([String])
            ( _tyfunIdatas,_tyfunIverificar) =
                (tyfun_ (_tyfunOlistadatas))
            -- "AST.ag"(line 114, column 9)
            (_tyfunOlistadatas@_) =
                _lhsIlistadatas
            -- "AST.ag"(line 117, column 9)
            (_lhsOverificar@_) =
                _tyfunIverificar
            -- copy rule (up)
            (_lhsOdatas@_) =
                _tyfunIdatas
        in  ( _lhsOdatas,_lhsOverificar)
-- FunctionDeclaration -----------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for FunctionDeclaration.FunctionDeclaration:

-}
data FunctionDeclaration = FunctionDeclaration_FunctionDeclaration (String) (StringList) (Expresion)
                         deriving ( Show)
-- semantic domain
type T_FunctionDeclaration = ( )
-- cata
sem_FunctionDeclaration :: (FunctionDeclaration) ->
                           (T_FunctionDeclaration)
sem_FunctionDeclaration ((FunctionDeclaration_FunctionDeclaration (_string) (_stringList) (_expresion))) =
    (sem_FunctionDeclaration_FunctionDeclaration (_string) ((sem_StringList (_stringList))) ((sem_Expresion (_expresion))))
sem_FunctionDeclaration_FunctionDeclaration :: (String) ->
                                               (T_StringList) ->
                                               (T_Expresion) ->
                                               (T_FunctionDeclaration)
sem_FunctionDeclaration_FunctionDeclaration (string_) (stringList_) (expresion_) =
    let 
    in  ( )
-- FunctionDeclarationList -------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for FunctionDeclarationList.Cons:

-}
{-
   local variables for FunctionDeclarationList.Nil:

-}
type FunctionDeclarationList = [(FunctionDeclaration)]
-- semantic domain
type T_FunctionDeclarationList = ( )
-- cata
sem_FunctionDeclarationList :: (FunctionDeclarationList) ->
                               (T_FunctionDeclarationList)
sem_FunctionDeclarationList (list) =
    (Prelude.foldr (sem_FunctionDeclarationList_Cons) (sem_FunctionDeclarationList_Nil) ((Prelude.map sem_FunctionDeclaration list)))
sem_FunctionDeclarationList_Cons :: (T_FunctionDeclaration) ->
                                    (T_FunctionDeclarationList) ->
                                    (T_FunctionDeclarationList)
sem_FunctionDeclarationList_Cons (hd_) (tl_) =
    let 
    in  ( )
sem_FunctionDeclarationList_Nil :: (T_FunctionDeclarationList)
sem_FunctionDeclarationList_Nil  =
    let 
    in  ( )
-- LitExp ------------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for LitExp.Tuple:

-}
type LitExp = ( (Literal),(Expresion))
-- semantic domain
type T_LitExp = ( )
-- cata
sem_LitExp :: (LitExp) ->
              (T_LitExp)
sem_LitExp (( lit,exp)) =
    (sem_LitExp_Tuple ((sem_Literal (lit))) ((sem_Expresion (exp))))
sem_LitExp_Tuple :: (T_Literal) ->
                    (T_Expresion) ->
                    (T_LitExp)
sem_LitExp_Tuple (lit_) (exp_) =
    let 
    in  ( )
-- LitExpList --------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for LitExpList.Cons:

-}
{-
   local variables for LitExpList.Nil:

-}
type LitExpList = [(LitExp)]
-- semantic domain
type T_LitExpList = ( )
-- cata
sem_LitExpList :: (LitExpList) ->
                  (T_LitExpList)
sem_LitExpList (list) =
    (Prelude.foldr (sem_LitExpList_Cons) (sem_LitExpList_Nil) ((Prelude.map sem_LitExp list)))
sem_LitExpList_Cons :: (T_LitExp) ->
                       (T_LitExpList) ->
                       (T_LitExpList)
sem_LitExpList_Cons (hd_) (tl_) =
    let 
    in  ( )
sem_LitExpList_Nil :: (T_LitExpList)
sem_LitExpList_Nil  =
    let 
    in  ( )
-- Literal -----------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for Literal.LitBool:

-}
{-
   local variables for Literal.LitChar:

-}
{-
   local variables for Literal.LitInt:

-}
{-
   local variables for Literal.LitString:

-}
data Literal = Literal_LitBool (String)
             | Literal_LitChar (String)
             | Literal_LitInt (String)
             | Literal_LitString (String)
             deriving ( Show)
-- semantic domain
type T_Literal = ( )
-- cata
sem_Literal :: (Literal) ->
               (T_Literal)
sem_Literal ((Literal_LitBool (_string))) =
    (sem_Literal_LitBool (_string))
sem_Literal ((Literal_LitChar (_string))) =
    (sem_Literal_LitChar (_string))
sem_Literal ((Literal_LitInt (_string))) =
    (sem_Literal_LitInt (_string))
sem_Literal ((Literal_LitString (_string))) =
    (sem_Literal_LitString (_string))
sem_Literal_LitBool :: (String) ->
                       (T_Literal)
sem_Literal_LitBool (string_) =
    let 
    in  ( )
sem_Literal_LitChar :: (String) ->
                       (T_Literal)
sem_Literal_LitChar (string_) =
    let 
    in  ( )
sem_Literal_LitInt :: (String) ->
                      (T_Literal)
sem_Literal_LitInt (string_) =
    let 
    in  ( )
sem_Literal_LitString :: (String) ->
                         (T_Literal)
sem_Literal_LitString (string_) =
    let 
    in  ( )
-- ModBody -----------------------------------------------------
{-
   inherited attributes:
      listadatas           : [String]

   chained attributes:

   synthesised attributes:
      datas                : [String]
      verificar            : Bool

-}
{-
   local variables for ModBody.ModBodyDB:

-}
{-
   local variables for ModBody.ModBodyFB:

-}
{-
   local variables for ModBody.ModBodyS:

-}
data ModBody = ModBody_ModBodyDB (DataDeclaration) (ModBody)
             | ModBody_ModBodyFB (FuncTyDecl) (ModBody)
             | ModBody_ModBodyS 
             deriving ( Show)
-- semantic domain
type T_ModBody = ([String]) ->
                 ( ([String]),(Bool))
-- cata
sem_ModBody :: (ModBody) ->
               (T_ModBody)
sem_ModBody ((ModBody_ModBodyDB (_dataDeclaration) (_modBody))) =
    (sem_ModBody_ModBodyDB ((sem_DataDeclaration (_dataDeclaration))) ((sem_ModBody (_modBody))))
sem_ModBody ((ModBody_ModBodyFB (_funcTyDecl) (_modBody))) =
    (sem_ModBody_ModBodyFB ((sem_FuncTyDecl (_funcTyDecl))) ((sem_ModBody (_modBody))))
sem_ModBody ((ModBody_ModBodyS )) =
    (sem_ModBody_ModBodyS )
sem_ModBody_ModBodyDB :: (T_DataDeclaration) ->
                         (T_ModBody) ->
                         (T_ModBody)
sem_ModBody_ModBodyDB (dataDeclaration_) (modBody_) =
    \ _lhsIlistadatas ->
        let _lhsOdatas :: ([String])
            _lhsOverificar :: (Bool)
            _dataDeclarationIdatas :: ([String])
            _dataDeclarationIverificar :: (Bool)
            _dataDeclarationOlistadatas :: ([String])
            _modBodyIdatas :: ([String])
            _modBodyIverificar :: (Bool)
            _modBodyOlistadatas :: ([String])
            ( _dataDeclarationIdatas,_dataDeclarationIverificar) =
                (dataDeclaration_ (_dataDeclarationOlistadatas))
            ( _modBodyIdatas,_modBodyIverificar) =
                (modBody_ (_modBodyOlistadatas))
            -- "AST.ag"(line 96, column 13)
            (_lhsOdatas@_) =
                _dataDeclarationIdatas ++ _modBodyIdatas
            -- copy rule (up)
            (_lhsOverificar@_) =
                _modBodyIverificar
            -- copy rule (down)
            (_dataDeclarationOlistadatas@_) =
                _lhsIlistadatas
            -- copy rule (down)
            (_modBodyOlistadatas@_) =
                _lhsIlistadatas
        in  ( _lhsOdatas,_lhsOverificar)
sem_ModBody_ModBodyFB :: (T_FuncTyDecl) ->
                         (T_ModBody) ->
                         (T_ModBody)
sem_ModBody_ModBodyFB (funcTyDecl_) (modBody_) =
    \ _lhsIlistadatas ->
        let _lhsOdatas :: ([String])
            _lhsOverificar :: (Bool)
            _funcTyDeclIdatas :: ([String])
            _funcTyDeclIverificar :: (Bool)
            _funcTyDeclOlistadatas :: ([String])
            _modBodyIdatas :: ([String])
            _modBodyIverificar :: (Bool)
            _modBodyOlistadatas :: ([String])
            ( _funcTyDeclIdatas,_funcTyDeclIverificar) =
                (funcTyDecl_ (_funcTyDeclOlistadatas))
            ( _modBodyIdatas,_modBodyIverificar) =
                (modBody_ (_modBodyOlistadatas))
            -- "AST.ag"(line 97, column 13)
            (_lhsOdatas@_) =
                _modBodyIdatas
            -- "AST.ag"(line 101, column 13)
            (_funcTyDeclOlistadatas@_) =
                _lhsIlistadatas
            -- "AST.ag"(line 105, column 13)
            (_lhsOverificar@_) =
                _funcTyDeclIverificar && _modBodyIverificar
            -- copy rule (down)
            (_modBodyOlistadatas@_) =
                _lhsIlistadatas
        in  ( _lhsOdatas,_lhsOverificar)
sem_ModBody_ModBodyS :: (T_ModBody)
sem_ModBody_ModBodyS  =
    \ _lhsIlistadatas ->
        let _lhsOdatas :: ([String])
            _lhsOverificar :: (Bool)
            -- "AST.ag"(line 98, column 12)
            (_lhsOdatas@_) =
                []
            -- "AST.ag"(line 102, column 12)
            (_lhsOverificar@_) =
                True
        in  ( _lhsOdatas,_lhsOverificar)
-- ModDecl -----------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for ModDecl.ModDecl:

-}
data ModDecl = ModDecl_ModDecl (String)
             deriving ( Show)
-- semantic domain
type T_ModDecl = ( )
-- cata
sem_ModDecl :: (ModDecl) ->
               (T_ModDecl)
sem_ModDecl ((ModDecl_ModDecl (_string))) =
    (sem_ModDecl_ModDecl (_string))
sem_ModDecl_ModDecl :: (String) ->
                       (T_ModDecl)
sem_ModDecl_ModDecl (string_) =
    let 
    in  ( )
-- Module ------------------------------------------------------
{-
   inherited attributes:
      listadatas           : [String]

   chained attributes:

   synthesised attributes:
      datas                : [String]
      verificar            : Bool

-}
{-
   local variables for Module.ModuleB:

-}
{-
   local variables for Module.ModuleDB:

-}
data Module = Module_ModuleB (ModBody)
            | Module_ModuleDB (ModDecl) (ModBody)
            deriving ( Show)
-- semantic domain
type T_Module = ([String]) ->
                ( ([String]),(Bool))
-- cata
sem_Module :: (Module) ->
              (T_Module)
sem_Module ((Module_ModuleB (_modBody))) =
    (sem_Module_ModuleB ((sem_ModBody (_modBody))))
sem_Module ((Module_ModuleDB (_modDecl) (_modBody))) =
    (sem_Module_ModuleDB ((sem_ModDecl (_modDecl))) ((sem_ModBody (_modBody))))
sem_Module_ModuleB :: (T_ModBody) ->
                      (T_Module)
sem_Module_ModuleB (modBody_) =
    \ _lhsIlistadatas ->
        let _lhsOdatas :: ([String])
            _lhsOverificar :: (Bool)
            _modBodyIdatas :: ([String])
            _modBodyIverificar :: (Bool)
            _modBodyOlistadatas :: ([String])
            ( _modBodyIdatas,_modBodyIverificar) =
                (modBody_ (_modBodyOlistadatas))
            -- "AST.ag"(line 85, column 11)
            (_lhsOdatas@_) =
                _modBodyIdatas
            -- "AST.ag"(line 89, column 11)
            (_modBodyOlistadatas@_) =
                _lhsIlistadatas
            -- "AST.ag"(line 93, column 11)
            (_lhsOverificar@_) =
                _modBodyIverificar
        in  ( _lhsOdatas,_lhsOverificar)
sem_Module_ModuleDB :: (T_ModDecl) ->
                       (T_ModBody) ->
                       (T_Module)
sem_Module_ModuleDB (modDecl_) (modBody_) =
    \ _lhsIlistadatas ->
        let _lhsOdatas :: ([String])
            _lhsOverificar :: (Bool)
            _modBodyIdatas :: ([String])
            _modBodyIverificar :: (Bool)
            _modBodyOlistadatas :: ([String])
            ( _modBodyIdatas,_modBodyIverificar) =
                (modBody_ (_modBodyOlistadatas))
            -- "AST.ag"(line 84, column 12)
            (_lhsOdatas@_) =
                _modBodyIdatas
            -- "AST.ag"(line 88, column 12)
            (_modBodyOlistadatas@_) =
                _lhsIlistadatas
            -- "AST.ag"(line 92, column 12)
            (_lhsOverificar@_) =
                _modBodyIverificar
        in  ( _lhsOdatas,_lhsOverificar)
-- Operator ----------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for Operator.Operator:

-}
data Operator = Operator_Operator (String)
              deriving ( Show)
-- semantic domain
type T_Operator = ( )
-- cata
sem_Operator :: (Operator) ->
                (T_Operator)
sem_Operator ((Operator_Operator (_string))) =
    (sem_Operator_Operator (_string))
sem_Operator_Operator :: (String) ->
                         (T_Operator)
sem_Operator_Operator (string_) =
    let 
    in  ( )
-- Param -------------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for Param.ParamIM:

-}
{-
   local variables for Param.ParamLit:

-}
data Param = Param_ParamIM (String)
           | Param_ParamLit (Literal)
           deriving ( Show)
-- semantic domain
type T_Param = ( )
-- cata
sem_Param :: (Param) ->
             (T_Param)
sem_Param ((Param_ParamIM (_string))) =
    (sem_Param_ParamIM (_string))
sem_Param ((Param_ParamLit (_literal))) =
    (sem_Param_ParamLit ((sem_Literal (_literal))))
sem_Param_ParamIM :: (String) ->
                     (T_Param)
sem_Param_ParamIM (string_) =
    let 
    in  ( )
sem_Param_ParamLit :: (T_Literal) ->
                      (T_Param)
sem_Param_ParamLit (literal_) =
    let 
    in  ( )
-- ParamList ---------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for ParamList.Cons:

-}
{-
   local variables for ParamList.Nil:

-}
type ParamList = [(Param)]
-- semantic domain
type T_ParamList = ( )
-- cata
sem_ParamList :: (ParamList) ->
                 (T_ParamList)
sem_ParamList (list) =
    (Prelude.foldr (sem_ParamList_Cons) (sem_ParamList_Nil) ((Prelude.map sem_Param list)))
sem_ParamList_Cons :: (T_Param) ->
                      (T_ParamList) ->
                      (T_ParamList)
sem_ParamList_Cons (hd_) (tl_) =
    let 
    in  ( )
sem_ParamList_Nil :: (T_ParamList)
sem_ParamList_Nil  =
    let 
    in  ( )
-- Root --------------------------------------------------------
{-
   inherited attributes:
      listadatas           : [String]

   chained attributes:

   synthesised attributes:
      datas                : [String]
      verificar            : IO()

-}
{-
   local variables for Root.Root:
      datas

-}
data Root = Root_Root (Module)
          deriving ( Show)
-- semantic domain
type T_Root = ([String]) ->
              ( ([String]),(IO()))
-- cata
sem_Root :: (Root) ->
            (T_Root)
sem_Root ((Root_Root (_module))) =
    (sem_Root_Root ((sem_Module (_module))))
sem_Root_Root :: (T_Module) ->
                 (T_Root)
sem_Root_Root (module_) =
    \ _lhsIlistadatas ->
        let _lhsOdatas :: ([String])
            _lhsOverificar :: (IO())
            _moduleIdatas :: ([String])
            _moduleIverificar :: (Bool)
            _moduleOlistadatas :: ([String])
            ( _moduleIdatas,_moduleIverificar) =
                (module_ (_moduleOlistadatas))
            -- "AST.ag"(line 74, column 8)
            (_lhsOdatas@_) =
                ["String","Int","Bool","Char"] ++ _moduleIdatas
            -- "AST.ag"(line 75, column 8)
            (_datas@_) =
                ["String","Int","Bool","Char"] ++ _moduleIdatas
            -- "AST.ag"(line 78, column 8)
            (_moduleOlistadatas@_) =
                _datas
            -- "AST.ag"(line 81, column 7)
            (_lhsOverificar@_) =
                putStrLn (show _moduleIverificar)
        in  ( _lhsOdatas,_lhsOverificar)
-- StringList --------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for StringList.Cons:

-}
{-
   local variables for StringList.Nil:

-}
type StringList = [(String)]
-- semantic domain
type T_StringList = ( )
-- cata
sem_StringList :: (StringList) ->
                  (T_StringList)
sem_StringList (list) =
    (Prelude.foldr (sem_StringList_Cons) (sem_StringList_Nil) (list))
sem_StringList_Cons :: (String) ->
                       (T_StringList) ->
                       (T_StringList)
sem_StringList_Cons (hd_) (tl_) =
    let 
    in  ( )
sem_StringList_Nil :: (T_StringList)
sem_StringList_Nil  =
    let 
    in  ( )
-- TypeFunction ------------------------------------------------
{-
   inherited attributes:
      listadatas           : [String]

   chained attributes:

   synthesised attributes:
      datas                : [String]
      verificar            : Bool

-}
{-
   local variables for TypeFunction.TypeFunction:

-}
data TypeFunction = TypeFunction_TypeFunction (String) (Typee) (TypeList)
                  deriving ( Show)
-- semantic domain
type T_TypeFunction = ([String]) ->
                      ( ([String]),(Bool))
-- cata
sem_TypeFunction :: (TypeFunction) ->
                    (T_TypeFunction)
sem_TypeFunction ((TypeFunction_TypeFunction (_string) (_typee) (_typeList))) =
    (sem_TypeFunction_TypeFunction (_string) ((sem_Typee (_typee))) ((sem_TypeList (_typeList))))
sem_TypeFunction_TypeFunction :: (String) ->
                                 (T_Typee) ->
                                 (T_TypeList) ->
                                 (T_TypeFunction)
sem_TypeFunction_TypeFunction (string_) (typee_) (typeList_) =
    \ _lhsIlistadatas ->
        let _lhsOdatas :: ([String])
            _lhsOverificar :: (Bool)
            _typeeIdatas :: ([String])
            _typeeIverificar :: (Bool)
            _typeeOlistadatas :: ([String])
            _typeListIdatas :: ([String])
            _typeListIverificar :: (Bool)
            _typeListOlistadatas :: ([String])
            ( _typeeIdatas,_typeeIverificar) =
                (typee_ (_typeeOlistadatas))
            ( _typeListIdatas,_typeListIverificar) =
                (typeList_ (_typeListOlistadatas))
            -- "AST.ag"(line 120, column 16)
            (_typeeOlistadatas@_) =
                _lhsIlistadatas
            -- "AST.ag"(line 121, column 16)
            (_typeListOlistadatas@_) =
                _lhsIlistadatas
            -- "AST.ag"(line 124, column 16)
            (_lhsOverificar@_) =
                _typeeIverificar && _typeListIverificar
            -- copy rule (up)
            (_lhsOdatas@_) =
                _typeListIdatas
        in  ( _lhsOdatas,_lhsOverificar)
-- TypeList ----------------------------------------------------
{-
   inherited attributes:
      listadatas           : [String]

   chained attributes:

   synthesised attributes:
      datas                : [String]
      verificar            : Bool

-}
{-
   local variables for TypeList.Cons:

-}
{-
   local variables for TypeList.Nil:

-}
type TypeList = [(Typee)]
-- semantic domain
type T_TypeList = ([String]) ->
                  ( ([String]),(Bool))
-- cata
sem_TypeList :: (TypeList) ->
                (T_TypeList)
sem_TypeList (list) =
    (Prelude.foldr (sem_TypeList_Cons) (sem_TypeList_Nil) ((Prelude.map sem_Typee list)))
sem_TypeList_Cons :: (T_Typee) ->
                     (T_TypeList) ->
                     (T_TypeList)
sem_TypeList_Cons (hd_) (tl_) =
    \ _lhsIlistadatas ->
        let _lhsOdatas :: ([String])
            _lhsOverificar :: (Bool)
            _hdIdatas :: ([String])
            _hdIverificar :: (Bool)
            _hdOlistadatas :: ([String])
            _tlIdatas :: ([String])
            _tlIverificar :: (Bool)
            _tlOlistadatas :: ([String])
            ( _hdIdatas,_hdIverificar) =
                (hd_ (_hdOlistadatas))
            ( _tlIdatas,_tlIverificar) =
                (tl_ (_tlOlistadatas))
            -- "AST.ag"(line 137, column 8)
            (_lhsOverificar@_) =
                _hdIverificar && _tlIverificar
            -- "AST.ag"(line 141, column 8)
            (_lhsOdatas@_) =
                []
            -- copy rule (down)
            (_hdOlistadatas@_) =
                _lhsIlistadatas
            -- copy rule (down)
            (_tlOlistadatas@_) =
                _lhsIlistadatas
        in  ( _lhsOdatas,_lhsOverificar)
sem_TypeList_Nil :: (T_TypeList)
sem_TypeList_Nil  =
    \ _lhsIlistadatas ->
        let _lhsOdatas :: ([String])
            _lhsOverificar :: (Bool)
            -- "AST.ag"(line 138, column 7)
            (_lhsOverificar@_) =
                True
            -- "AST.ag"(line 142, column 7)
            (_lhsOdatas@_) =
                []
        in  ( _lhsOdatas,_lhsOverificar)
-- Typee -------------------------------------------------------
{-
   inherited attributes:
      listadatas           : [String]

   chained attributes:

   synthesised attributes:
      datas                : [String]
      verificar            : Bool

-}
{-
   local variables for Typee.TypeBas:

-}
{-
   local variables for Typee.TypeIMa:

-}
{-
   local variables for Typee.TypeIMe:

-}
data Typee = Typee_TypeBas (String)
           | Typee_TypeIMa (String)
           | Typee_TypeIMe (String)
           deriving ( Show)
-- semantic domain
type T_Typee = ([String]) ->
               ( ([String]),(Bool))
-- cata
sem_Typee :: (Typee) ->
             (T_Typee)
sem_Typee ((Typee_TypeBas (_string))) =
    (sem_Typee_TypeBas (_string))
sem_Typee ((Typee_TypeIMa (_string))) =
    (sem_Typee_TypeIMa (_string))
sem_Typee ((Typee_TypeIMe (_string))) =
    (sem_Typee_TypeIMe (_string))
sem_Typee_TypeBas :: (String) ->
                     (T_Typee)
sem_Typee_TypeBas (string_) =
    \ _lhsIlistadatas ->
        let _lhsOdatas :: ([String])
            _lhsOverificar :: (Bool)
            -- "AST.ag"(line 129, column 11)
            (_lhsOdatas@_) =
                []
            -- "AST.ag"(line 134, column 11)
            (_lhsOverificar@_) =
                if (elem string_ _lhsIlistadatas) then True else error ("Tipo de dato" ++ string_ ++ "no definido")
        in  ( _lhsOdatas,_lhsOverificar)
sem_Typee_TypeIMa :: (String) ->
                     (T_Typee)
sem_Typee_TypeIMa (string_) =
    \ _lhsIlistadatas ->
        let _lhsOdatas :: ([String])
            _lhsOverificar :: (Bool)
            -- "AST.ag"(line 128, column 11)
            (_lhsOdatas@_) =
                []
            -- "AST.ag"(line 133, column 11)
            (_lhsOverificar@_) =
                if (elem string_ _lhsIlistadatas) then True else error ("Tipo de dato" ++ string_ ++ "no definido")
        in  ( _lhsOdatas,_lhsOverificar)
sem_Typee_TypeIMe :: (String) ->
                     (T_Typee)
sem_Typee_TypeIMe (string_) =
    \ _lhsIlistadatas ->
        let _lhsOdatas :: ([String])
            _lhsOverificar :: (Bool)
            -- "AST.ag"(line 127, column 11)
            (_lhsOdatas@_) =
                []
            -- "AST.ag"(line 132, column 11)
            (_lhsOverificar@_) =
                if (elem string_ _lhsIlistadatas) then True else error ("Tipo de dato" ++ string_ ++ "no definido")
        in  ( _lhsOdatas,_lhsOverificar)


